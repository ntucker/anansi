#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _util = require("util");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _memfs = require("memfs");

var _express = _interopRequireDefault(require("express"));

var _ora = _interopRequireDefault(require("ora"));

var _fsMonkey = require("fs-monkey");

var _tmp = _interopRequireDefault(require("tmp"));

var _sourceMapSupport = _interopRequireDefault(require("source-map-support"));

var _unionfs = require("unionfs");

var _compression = _interopRequireDefault(require("compression"));

require("cross-fetch/polyfill");

// eslint-disable-next-line @typescript-eslint/no-var-requires
const webpackConfig = require(require.resolve( // TODO: use normal resolution algorithm to find webpack file
_path.default.join(process.cwd(), 'webpack.config')));

const entrypoint = process.argv[2];
const PORT = process.env.PORT || 3000;
process.env.WEBPACK_PUBLIC_HOST = `http://localhost:${PORT}`;
process.env.WEBPACK_PUBLIC_PATH = '/assets/';

if (!entrypoint) {
  console.log(`Usage: ${process.argv[0]} <entrypoint-file>`);
  process.exit(-1);
}

const loader = (0, _ora.default)('Building the assets').start(); // Set up in memory filesystem

const volume = new _memfs.Volume();
const fs = (0, _memfs.createFsFromVolume)(volume);

_unionfs.ufs.use(_fs.default).use(fs);

(0, _fsMonkey.patchRequire)(_unionfs.ufs);
const readFile = (0, _util.promisify)(_unionfs.ufs.readFile);
let server; // Generate a temporary file so we can hot reload from the root of the application

function hotEntry(entryPath) {
  // eslint-disable-next-line
  // @ts-ignore for some reason it's not picking up that other options are optional
  const generatedEntrypoint = _tmp.default.fileSync({
    postfix: '.js'
  });

  _fs.default.writeSync(generatedEntrypoint.fd, `
import entry from "${_path.default.resolve(process.cwd(), entryPath)}";

if (module.hot) {
  module.hot.accept();
}

export default entry;
  `);

  return generatedEntrypoint;
}

const webpackConfigs = [webpackConfig({
  entrypoint: hotEntry(entrypoint).name,
  name: 'client'
}, {
  mode: 'development'
}), webpackConfig({
  entrypoint: hotEntry(entrypoint.replace('.tsx', '.server.tsx')).name,
  name: 'server'
}, {
  mode: 'development',
  target: 'node'
})]; // initialize the webpack compiler

const compiler = (0, _webpack.default)(webpackConfigs);
compiler.outputFileSystem = { ...fs,
  join: _path.default.join
};

_sourceMapSupport.default.install({
  hookRequire: true
});

function getServerBundle(serverStats) {
  var _serverJson$outputPat;

  const serverJson = serverStats.toJson({
    assets: true
  });
  return _path.default.join((_serverJson$outputPat = serverJson.outputPath) != null ? _serverJson$outputPat : '', 'main.js');
}

function handleErrors(fn) {
  return async function (req, res, next) {
    try {
      return await fn(req, res);
    } catch (x) {
      next(x);
    }
  };
} // Start the express server after the first compilation


function initializeApp(stats) {
  var _clientStats$compilat, _clientStats$compilat2, _serverStats$compilat, _serverStats$compilat2;

  loader.info('Launching server');
  const [clientStats, serverStats] = stats;

  if (clientStats !== null && clientStats !== void 0 && (_clientStats$compilat = clientStats.compilation) !== null && _clientStats$compilat !== void 0 && (_clientStats$compilat2 = _clientStats$compilat.errors) !== null && _clientStats$compilat2 !== void 0 && _clientStats$compilat2.length || serverStats !== null && serverStats !== void 0 && (_serverStats$compilat = serverStats.compilation) !== null && _serverStats$compilat !== void 0 && (_serverStats$compilat2 = _serverStats$compilat.errors) !== null && _serverStats$compilat2 !== void 0 && _serverStats$compilat2.length) {
    console.log('Errors for client build: ', clientStats.compilation.errors);
    console.log('Errors for server build:', serverStats.compilation.errors); // TODO: handle more gracefully

    process.exit(-1);
  }

  const wrappingApp = (0, _express.default)(); // eslint-disable-next-line
  //@ts-ignore

  wrappingApp.use((0, _compression.default)()); // ASSETS

  wrappingApp.use((0, _webpackHotMiddleware.default)(compiler.compilers[0], {
    log: console.log,
    path: '/__webpack_hmr',
    heartbeat: 10 * 1000 //noInfo: true,
    //name: 'client',

  }));
  const clientManifest = clientStats.toJson();

  const assetRoute = async (req, res) => {
    var _req$url$substr, _req$url, _clientManifest$outpu;

    const filename = (_req$url$substr = (_req$url = req.url) === null || _req$url === void 0 ? void 0 : _req$url.substr(process.env.WEBPACK_PUBLIC_PATH.length)) != null ? _req$url$substr : '';

    const assetPath = _path.default.join((_clientManifest$outpu = clientManifest.outputPath) != null ? _clientManifest$outpu : '', filename);

    try {
      const fileContent = (await readFile(assetPath)).toString();
      res.contentType(filename);
      res.send(fileContent);
    } catch (e) {
      res.status(404);
      res.send(e);
      return;
    }
  };

  wrappingApp.get(`${process.env.WEBPACK_PUBLIC_PATH}*`, assetRoute); // SERVER SIDE RENDERING
  // eslint-disable-next-line @typescript-eslint/no-var-requires

  const render = require(getServerBundle(serverStats)).default;

  wrappingApp.get('/*', handleErrors(async function (req, res) {
    if (req.url.endsWith('favicon.ico')) {
      res.statusCode = 404;
      res.setHeader('Content-type', 'text/html');
      res.send('not found');
      return;
    }

    res.socket.on('error', error => {
      console.error('Fatal', error);
    });
    await render(clientManifest, req, res);
  }));
  server = wrappingApp.listen(PORT, () => {
    console.log(`Listening at ${PORT}...`);
  }).on('error', function (error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const isPipe = portOrPipe => Number.isNaN(portOrPipe);

    const bind = isPipe(PORT) ? 'Pipe ' + PORT : 'Port ' + PORT;

    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;

      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;

      default:
        throw error;
    }
  });
} // Watch the files for changes


const watcher = compiler.watch({}, (err, multiStats) => {
  if (!multiStats) {
    console.error('stats not send');
    process.exit(-1);
  }

  if (err) {
    console.error('Error in compilation');
    console.error(err);
    process.exit(-1);
  }

  if (server) {
    loader.succeed('Webpack bundle updated');
    return;
  }

  try {
    initializeApp(multiStats.stats);
  } catch (e) {
    console.error('Failed to initialize app');
    console.error(e);
  }
});
process.on('SIGINT', () => {
  var _server;

  loader.warn('Received SIGINT, devserver shutting down');
  if (server) console.log('Closing server');
  (_server = server) === null || _server === void 0 ? void 0 : _server.close(() => {
    loader.info('Server closed');
  });
  watcher.close(() => {
    loader.info('webpack build stopped');
  });
  process.exit(-1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,